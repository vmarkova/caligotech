{
  "info": {
    "_postman_id": "0c30dd55-f503-46bd-bfbf-0704315a4a63",
    "name": "Drall",
    "schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
  },
  "item": [
    {
      "_postman_id": "e09417d2-6d4d-4990-9a43-789832080cbb",
      "name": "PLAT-109:Verify promo hash is created when promotion is published",
      "description": "",
      "item": [
        {
          "_postman_id": "66557801-0492-43be-9a1c-23242c4b3058",
          "name": "Step 1:Post promotion",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "3c55132f-c220-4675-a6bb-f15101ae0f97",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const testObject = pm.response.json();",
                  "",
                  "",
                  "pm.environment.set(\"promo_id\", testObject.id);",
                  "",
                  "",
                  "pm.test(\"Promo contains Id\", function() {",
                  "    const Id = testObject.id;",
                  "    const lengthId = Id.length > 0;",
                  "    pm.expect(lengthId).to.eql(true);",
                  "});",
                  "",
                  "pm.test(\"Promo contains start date\", function() {",
                  "    const startDate = new Date(testObject.startDate);",
                  "    const isADate = Object.prototype.toString.call(startDate) === '[object Date]';",
                  "    pm.expect(isADate).to.eql(true);",
                  "});",
                  "",
                  "pm.test(\"Promo contains end date\", function() {",
                  "    const endDate = new Date(testObject.endDate);",
                  "    const isADate = Object.prototype.toString.call(endDate) === '[object Date]';",
                  "    pm.expect(isADate).to.eql(true);",
                  "});",
                  "",
                  "pm.test(\"Promo contains title\", function() {",
                  "    const title = testObject.title;",
                  "    const lengthTitle = title.length > 0;",
                  "    pm.expect(lengthTitle).to.eql(true);",
                  "});",
                  "",
                  "pm.test(\"Promo contains text\", function() {",
                  "    const text = testObject.text;",
                  "    const lengthText = text.length > 0;",
                  "    pm.expect(lengthText).to.eql(true);",
                  "});",
                  "",
                  "pm.test(\"Promo contains details\", function() {",
                  "    const details = testObject.details;",
                  "    const lengthDetails = details.length > 0;",
                  "    pm.expect(lengthDetails).to.eql(true);",
                  "});",
                  "",
                  "pm.test(\"Promo contains promo code\", function() {",
                  "    const promoCode = testObject.providerPromotionCode;",
                  "    const lengthPromoCode = promoCode.length > 0;",
                  "    pm.expect(lengthPromoCode).to.eql(true);",
                  "});",
                  "",
                  "pm.test(\"Promo contains images link\", function() {",
                  "    const images = testObject.images;",
                  "    const lengthimages = images.length > 0;",
                  "    pm.expect(lengthimages).to.eql(true);",
                  "});",
                  "",
                  "",
                  "",
                  "var schema = {",
                  "  \"title\" : \"string\",",
                  "  \"providerPromotionCode\" : \"string\",",
                  "  \"text\" : \"string\",",
                  "  \"details\" : \"string\",",
                  "  \"images\" :\"array\",",
                  "  \"rule\" : {",
                  "    \"id\" : null,",
                  "    \"type\" : \"string\",",
                  "    \"condition\" : {",
                  "      \"id\" : null,",
                  "      \"type\" : \"string\",",
                  "      \"mpr\" : 1,",
                  "      \"product\" : {",
                  "        \"upcs\" : \"array\",",
                  "        \"brands\" : [ {",
                  "          \"brand\" : \"string\",",
                  "          \"products\" : [ \"string\" ]",
                  "        } ]",
                  "      }",
                  "    },",
                  "    \"reward\" : {",
                  "      \"type\" : \"string\",",
                  "      \"id\" : null,",
                  "      \"value\" : \"integer\",",
                  "      \"brands\" : [ {",
                  "          \"brand\" : \"string\",",
                  "          \"products\" : \"array\"",
                  "        } ]",
                  "    }",
                  "  },",
                  "  \"startDate\" : \"date\",",
                  "  \"endDate\" : \"date\",",
                  "  \"budgetId\" : \"string\",",
                  "  \"familyCode\" : \"string\",",
                  "  \"gs1Databar\" : \"string\"",
                  "  ",
                  "}",
                  "",
                  "",
                  "pm.test('Schema is valid', function() {",
                  "  pm.expect(tv4.validate(testObject, schema)).to.be.true;",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"title\" : \"Get $0.50 on Ivory Body Wash \",\r\n  \"providerPromotionCode\" : \"131240 \",\r\n  \"text\" : \"OFF ONE Ivory Body Wash (21oz or larger) \",\r\n  \"details\" : \"Dealer: Submission to Procter & Gamble signifies compliance with 'Requirements for Proper Coupon Redemption.' Please visit this link for coupon terms for proper redemption: http://www.pg.com/en_US/downloads/partners_suppliers/PG_Coupon_Terms_of_Proper_Redemption.pdf. Limit of one coupon per item. Consumer: Limit ONE coupon per purchase of products and quantities stated. Any other use constitutes fraud. Coupons are not authorized if purchasing products for resale. You may pay sales tax. Not valid in Puerto Rico.\",\r\n  \"images\" : [ \"ivory/5b3e8c36d12f85041119ea07.png\" ],\r\n  \"rule\" : {\r\n    \"id\" : null,\r\n    \"type\" : \"SingleRule\",\r\n    \"condition\" : {\r\n      \"id\" : null,\r\n      \"type\" : \"ClipCondition\"\r\n      },\r\n  \r\n    \"reward\" : {\r\n      \"type\" : \"DiscountValueReward\",\r\n      \"id\" : null,\r\n      \"value\" : 50,\r\n      \"brands\" : [ {\r\n          \"brand\" : \"1\",\r\n          \"products\" : [ \"12\" ]\r\n        } ]\r\n    }\r\n  },\r\n  \"startDate\" : \"2018-01-01T14:00:00\",\r\n  \"endDate\" : \"2018-01-31T14:00:00\",\r\n  \"budgetId\" : \"budget_id_1\",\r\n  \"familyCode\" : \"130\",\r\n  \"gs1Databar\" : \"81101007560913123933001101303170701\"\r\n  \r\n}"
            },
            "url": "http://qa-apps.caligotech.com:8188/promotions/"
          },
          "response": []
        },
        {
          "_postman_id": "228a7e48-5490-4cb8-b347-37f1409e1556",
          "name": "Step 2:Add Campaign to the Promotion",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "5f2180b7-9e90-483f-b84f-d95e14eb24de",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const testObject = pm.response.json();",
                  "pm.environment.set(\"camp_id\", testObject.id);",
                  "const promo_id = pm.environment.get(\"promo_id\");",
                  "",
                  "",
                  "pm.test(\"Promo contains campaign Id\", function() {",
                  "    const id = testObject.id;",
                  "    const lengthid = id.length > 0;",
                  "    pm.expect(lengthid).to.eql(true);",
                  "});",
                  "",
                  "pm.test(\"Promo contains start date\", function() {",
                  "    const startDate = new Date(testObject.startDate);",
                  "    const isADate = Object.prototype.toString.call(startDate) === '[object Date]';",
                  "    pm.expect(isADate).to.eql(true);",
                  "});",
                  "",
                  "pm.test(\"Promo contains end date\", function() {",
                  "    const endDate = new Date(testObject.endDate);",
                  "    const isADate = Object.prototype.toString.call(endDate) === '[object Date]';",
                  "    pm.expect(isADate).to.eql(true);",
                  "});",
                  "",
                  "pm.test(\"Promo contains clipByDate\", function() {",
                  "    const clipByDate = new Date(testObject.clipByDate);",
                  "    const isADate = Object.prototype.toString.call(clipByDate) === '[object Date]';",
                  "    pm.expect(isADate).to.eql(true);",
                  "});",
                  "",
                  "/*pm.test(\"Is clip date before end date in promotion\", function() {",
                  "    const clipByDate = new Date(testObject.clipByDate);",
                  "    const endDate = new Date(testObject.endDate);",
                  "    const clipDateBeforeEnd = clipByDate.getTime() <= endDate.getTime();",
                  "    pm.expect(clipDateBeforeEnd).to.eql(true);",
                  "});*/",
                  "",
                  "pm.test(\"Promotion Id check\", function () {",
                  "    //const equalId = Object.prototype.toString.call(promotionId) === promo_id;",
                  "  //  pm.expect(testObject.promotionId === promo_id).to.eql(true);",
                  " pm.expect(testObject.promotionId).to.eql(promo_id);",
                  " //pm.expect(testObject).to.have.property('id', promo_id);",
                  "});",
                  "",
                  "",
                  "",
                  "pm.test(\"Promo contains modifiedBy\", function() {",
                  "    const modifiedBy = testObject.modifiedBy;",
                  "    const lengthmodifiedBy = modifiedBy.length > 0;",
                  "    pm.expect(lengthmodifiedBy).to.eql(true);",
                  "});",
                  "",
                  "pm.test(\"Promo contains modifiedOn\", function() {",
                  "    const modifiedOnRaw = testObject.modifiedOn;",
                  "    const modifiedOn = new Date(modifiedOnRaw*1000);",
                  "    const isADate =  Object.prototype.toString.call(modifiedOn) === '[object Date]';",
                  "    pm.expect(isADate).to.eql(true);",
                  "});",
                  "",
                  "pm.test(\"Promo contains status\", function() {",
                  "    const status = testObject.status;",
                  "    const lengthstatus = status.length > 0;",
                  "    pm.expect(lengthstatus).to.eql(true);",
                  "});",
                  "",
                  "var schema = {",
                  "  \"clipByDate\": \"date\",",
                  "  \"endDate\": \"date\",",
                  "  \"id\": \"string\",",
                  "  \"modifiedBy\": \"string\",",
                  "  \"modifiedOn\": 0,",
                  "  \"overrides\": {",
                  "    \"details\": \"string\",",
                  "    \"images\": \"array\",",
                  "    \"rule\": {",
                  "      \"id\": 0",
                  "    },",
                  "    \"text\": \"string\",",
                  "    \"title\": \"string\"",
                  "  },",
                  "  \"promotionId\": \"string\",",
                  "  \"retailerProfileId\": \"string\",",
                  "  \"startDate\": \"date\",",
                  "  \"status\": \"string\",",
                  "  \"timezone\": \"string\"",
                  "}",
                  "",
                  "pm.test('Schema is valid', function() {",
                  "  pm.expect(tv4.validate(testObject, schema)).to.be.true;",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n \"clipByDate\": \"2019-01-01T14:00:00\",\n \"endDate\": \"2019-01-01T14:00:00\",\n \"overrides\": {\n   \"details\": \"Dealer: Submission to Procter & Gamble signifies compliance with 'Requirements for Proper Coupon Redemption.' Please visit this link for coupon terms for proper redemption: http://www.pg.com/en_US/downloads/partners_suppliers/PG_Coupon_Terms_of_Proper_Redemption.pdf. Limit of one coupon per item. Consumer: Limit ONE coupon per purchase of products and quantities stated. Any other use constitutes fraud. Coupons are not authorized if purchasing products for resale. You may pay sales tax. Not valid in Puerto Rico.\",\n   \"images\": [\n     \"Gain laundry detergent/5b6b6bd4d12f8512623c2e8b.png\"\n   ],\n   \"rule\": {\n     \"id\": 0,\"type\": \"SingleRule\"\n   },\n   \"text\": \"Get $0.50 OFF Gain\",\n   \"title\": \"When buy Two Gain laundry detergent\"\n },\n \"retailerProfileId\": \"3\",\n \"startDate\": \"2019-01-01T14:00:00\"\n   }"
            },
            "url": "http://qa-apps.caligotech.com:8188/promotions/{{promo_id}}/campaigns/"
          },
          "response": []
        },
        {
          "_postman_id": "85f724aa-82d9-4efc-ae6d-1528ec4a61de",
          "name": "Step 3:Publish Promotion",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "16174902-ccea-4ff4-8188-033802add3cc",
                "type": "text/javascript",
                "exec": [
                  "",
                  "pm.test(\"Successful POST request\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200,201,202,204]);",
                  "});",
                  ""
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "be2dfd92-fa4a-43da-a026-433d85eb6b37",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "",
                "value": "",
                "disabled": true
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"campaignIds\": [\r\n\t\"{{camp_id}}\"\r\n   ]\r\n}"
            },
            "url": "http://qa-apps.caligotech.com:8188/promotions/{{promo_id}}/publish/",
            "description": "Publish Promotion"
          },
          "response": []
        },
        {
          "_postman_id": "b4d1b617-fb30-4c3b-99f8-b8d5d4cd3400",
          "name": "Step 4: Get promotion from MongoDB",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "9d00a54b-7b5f-43a8-bad1-5712778ed295",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const testObject = pm.response.json();",
                  "const items = testObject.results[0];",
                  "console.log(\"items \"+items);",
                  "let dfs = items.dfsPromotionFileId;",
                  "console.log(\"dfs here \"+dfs);",
                  "pm.environment.set(\"dfsPromotion\", items.dfsPromotionFileId);",
                  "",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "body": {},
            "url": {
              "raw": "http://qa-mongodb.caligotech.com:27080/jedha/promotions/_find?criteria={\"_id\":{\"$oid\":\"{{promo_id}}\"}}",
              "protocol": "http",
              "host": [
                "qa-mongodb",
                "caligotech",
                "com"
              ],
              "port": "27080",
              "path": [
                "jedha",
                "promotions",
                "_find"
              ],
              "query": [
                {
                  "key": "criteria",
                  "value": "{\"_id\":{\"$oid\":\"{{promo_id}}\"}}",
                  "equals": true
                }
              ]
            }
          },
          "response": []
        },
        {
          "_postman_id": "c9c78fc9-0bf9-406e-9524-602dbc49d2a5",
          "name": "Step 5: Get promotion using dfsFileId",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "34b787ef-c0ed-43de-a7fe-90e8f1527f5d",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json\t"
              },
              {
                "key": "Accept",
                "value": "application/octet-stream"
              }
            ],
            "body": {},
            "url": "http://qa-apps.caligotech.com:8189/dfs/{{dfsPromotion}}"
          },
          "response": []
        }
      ]
    },
    {
      "_postman_id": "15705214-15bb-4458-a016-3d0702eb5dad",
      "name": "PLAT-118:Verify hash can be retrieved if promotion is published",
      "description": "",
      "item": [
        {
          "_postman_id": "3b0df857-b0e3-4b13-88da-7f07e3aa7855",
          "name": "Step 1:Post promotion",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "33973807-1fc9-4a4f-bcb8-419e4647b5eb",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const testObject = pm.response.json();",
                  "",
                  "",
                  "pm.environment.set(\"promo_id\", testObject.id);",
                  "",
                  "",
                  "",
                  "pm.test(\"Promo contains Id\", function() {",
                  "    const Id = testObject.id;",
                  "    const lengthId = Id.length > 0;",
                  "    pm.expect(lengthId).to.eql(true);",
                  "});",
                  "",
                  "pm.test(\"Promo contains start date\", function() {",
                  "    const startDate = new Date(testObject.startDate);",
                  "    const isADate = Object.prototype.toString.call(startDate) === '[object Date]';",
                  "    pm.expect(isADate).to.eql(true);",
                  "});",
                  "",
                  "pm.test(\"Promo contains end date\", function() {",
                  "    const endDate = new Date(testObject.endDate);",
                  "    const isADate = Object.prototype.toString.call(endDate) === '[object Date]';",
                  "    pm.expect(isADate).to.eql(true);",
                  "});",
                  "",
                  "/*pm.test(\"Promo contains budgetId\", function() {",
                  "    const budgetId = testObject.budgetId;",
                  "    const lengthbudgetId = budgetId.length > 0;",
                  "    pm.expect(lengthbudgetId).to.eql(true);",
                  "});",
                  "",
                  "pm.test(\"Promo contains familyCode with 3 digits\", function() {",
                  "    const familyCode = testObject.familyCode;",
                  "    const lengthfamilyCode = familyCode.length == 3;",
                  "    pm.expect(lengthfamilyCode).to.eql(true);",
                  "});",
                  "",
                  "pm.test(\"Promo contains gs1Databar with more than 25 digits\", function() {",
                  "    const gs1Databar = testObject.gs1Databar;",
                  "    const lengthgs1Databar = gs1Databar.length > 25;",
                  "    pm.expect(lengthgs1Databar).to.eql(true);",
                  "});",
                  "*/",
                  "pm.test(\"Promo contains title\", function() {",
                  "    const title = testObject.title;",
                  "    const lengthTitle = title.length > 0;",
                  "    pm.expect(lengthTitle).to.eql(true);",
                  "});",
                  "",
                  "pm.test(\"Promo contains text\", function() {",
                  "    const text = testObject.text;",
                  "    const lengthText = text.length > 0;",
                  "    pm.expect(lengthText).to.eql(true);",
                  "});",
                  "",
                  "pm.test(\"Promo contains details\", function() {",
                  "    const details = testObject.details;",
                  "    const lengthDetails = details.length > 0;",
                  "    pm.expect(lengthDetails).to.eql(true);",
                  "});",
                  "",
                  "pm.test(\"Promo contains promo code\", function() {",
                  "    const promoCode = testObject.providerPromotionCode;",
                  "    const lengthPromoCode = promoCode.length > 0;",
                  "    pm.expect(lengthPromoCode).to.eql(true);",
                  "});",
                  "",
                  "pm.test(\"Promo contains images link\", function() {",
                  "    const images = testObject.images;",
                  "    const lengthimages = images.length > 0;",
                  "    pm.expect(lengthimages).to.eql(true);",
                  "});",
                  "",
                  "",
                  "",
                  "var schema = {",
                  "  \"title\" : \"string\",",
                  "  \"providerPromotionCode\" : \"string\",",
                  "  \"text\" : \"string\",",
                  "  \"details\" : \"string\",",
                  "  \"images\" :\"array\",",
                  "  \"rule\" : {",
                  "    \"id\" : null,",
                  "    \"type\" : \"string\",",
                  "    \"condition\" : {",
                  "      \"id\" : null,",
                  "      \"type\" : \"string\",",
                  "      \"mpr\" : 1,",
                  "      \"product\" : {",
                  "        \"upcs\" : \"array\",",
                  "        \"brands\" : [ {",
                  "          \"brand\" : \"string\",",
                  "          \"products\" : [ \"string\" ]",
                  "        } ]",
                  "      }",
                  "    },",
                  "    \"reward\" : {",
                  "      \"type\" : \"string\",",
                  "      \"id\" : null,",
                  "      \"value\" : \"integer\",",
                  "      \"brands\" : [ {",
                  "          \"brand\" : \"string\",",
                  "          \"products\" : \"array\"",
                  "        } ]",
                  "    }",
                  "  },",
                  "  \"startDate\" : \"date\",",
                  "  \"endDate\" : \"date\",",
                  "  \"budgetId\" : \"string\",",
                  "  \"familyCode\" : \"string\",",
                  "  \"gs1Databar\" : \"string\"",
                  "  ",
                  "}",
                  "",
                  "",
                  "pm.test('Schema is valid', function() {",
                  "  pm.expect(tv4.validate(testObject, schema)).to.be.true;",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"title\" : \"Get $0.50 on Ivory Body Wash \",\r\n  \"providerPromotionCode\" : \"131240 \",\r\n  \"text\" : \"OFF ONE Ivory Body Wash (21oz or larger) \",\r\n  \"details\" : \"Dealer: Submission to Procter & Gamble signifies compliance with 'Requirements for Proper Coupon Redemption.' Please visit this link for coupon terms for proper redemption: http://www.pg.com/en_US/downloads/partners_suppliers/PG_Coupon_Terms_of_Proper_Redemption.pdf. Limit of one coupon per item. Consumer: Limit ONE coupon per purchase of products and quantities stated. Any other use constitutes fraud. Coupons are not authorized if purchasing products for resale. You may pay sales tax. Not valid in Puerto Rico.\",\r\n  \"images\" : [ \"ivory/5b3e8c36d12f85041119ea07.png\" ],\r\n  \"rule\" : {\r\n    \"id\" : null,\r\n    \"type\" : \"SingleRule\",\r\n    \"condition\" : {\r\n      \"id\" : null,\r\n      \"type\" : \"ClipCondition\"\r\n      },\r\n  \r\n    \"reward\" : {\r\n      \"type\" : \"DiscountValueReward\",\r\n      \"id\" : null,\r\n      \"value\" : 50,\r\n      \"brands\" : [ {\r\n          \"brand\" : \"1\",\r\n          \"products\" : [ \"12\" ]\r\n        } ]\r\n    }\r\n  },\r\n  \"startDate\" : \"2018-01-01T14:00:00\",\r\n  \"endDate\" : \"2018-01-31T14:00:00\",\r\n  \"budgetId\" : \"budget_id_1\",\r\n  \"familyCode\" : \"130\",\r\n  \"gs1Databar\" : \"81101007560913123933001101303170701\"\r\n  \r\n}"
            },
            "url": "http://qa-apps.caligotech.com:8188/promotions/"
          },
          "response": []
        },
        {
          "_postman_id": "2499530f-b0db-401e-8b1a-6d9093660cbc",
          "name": "Step 2:Add Campaign to the Promotion",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "88d85683-adf0-4438-b446-a9ebadc2b663",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const testObject = pm.response.json();",
                  "pm.environment.set(\"camp_id\", testObject.id);",
                  "const promo_id = pm.environment.get(\"promo_id\");",
                  "",
                  "",
                  "pm.test(\"Promo contains campaign Id\", function() {",
                  "    const id = testObject.id;",
                  "    const lengthid = id.length > 0;",
                  "    pm.expect(lengthid).to.eql(true);",
                  "});",
                  "",
                  "pm.test(\"Promo contains start date\", function() {",
                  "    const startDate = new Date(testObject.startDate);",
                  "    const isADate = Object.prototype.toString.call(startDate) === '[object Date]';",
                  "    pm.expect(isADate).to.eql(true);",
                  "});",
                  "",
                  "pm.test(\"Promo contains end date\", function() {",
                  "    const endDate = new Date(testObject.endDate);",
                  "    const isADate = Object.prototype.toString.call(endDate) === '[object Date]';",
                  "    pm.expect(isADate).to.eql(true);",
                  "});",
                  "",
                  "pm.test(\"Promo contains clipByDate\", function() {",
                  "    const clipByDate = new Date(testObject.clipByDate);",
                  "    const isADate = Object.prototype.toString.call(clipByDate) === '[object Date]';",
                  "    pm.expect(isADate).to.eql(true);",
                  "});",
                  "",
                  "/*pm.test(\"Is clip date before end date in promotion\", function() {",
                  "    const clipByDate = new Date(testObject.clipByDate);",
                  "    const endDate = new Date(testObject.endDate);",
                  "    const clipDateBeforeEnd = clipByDate.getTime() <= endDate.getTime();",
                  "    pm.expect(clipDateBeforeEnd).to.eql(true);",
                  "});*/",
                  "",
                  "pm.test(\"Promotion Id check\", function () {",
                  "    //const equalId = Object.prototype.toString.call(promotionId) === promo_id;",
                  "  //  pm.expect(testObject.promotionId === promo_id).to.eql(true);",
                  " pm.expect(testObject.promotionId).to.eql(promo_id);",
                  " //pm.expect(testObject).to.have.property('id', promo_id);",
                  "});",
                  "",
                  "",
                  "",
                  "pm.test(\"Promo contains modifiedBy\", function() {",
                  "    const modifiedBy = testObject.modifiedBy;",
                  "    const lengthmodifiedBy = modifiedBy.length > 0;",
                  "    pm.expect(lengthmodifiedBy).to.eql(true);",
                  "});",
                  "",
                  "pm.test(\"Promo contains modifiedOn\", function() {",
                  "    const modifiedOnRaw = testObject.modifiedOn;",
                  "    const modifiedOn = new Date(modifiedOnRaw*1000);",
                  "    const isADate =  Object.prototype.toString.call(modifiedOn) === '[object Date]';",
                  "    pm.expect(isADate).to.eql(true);",
                  "});",
                  "",
                  "pm.test(\"Promo contains status\", function() {",
                  "    const status = testObject.status;",
                  "    const lengthstatus = status.length > 0;",
                  "    pm.expect(lengthstatus).to.eql(true);",
                  "});",
                  "",
                  "var schema = {",
                  "  \"clipByDate\": \"date\",",
                  "  \"endDate\": \"date\",",
                  "  \"id\": \"string\",",
                  "  \"modifiedBy\": \"string\",",
                  "  \"modifiedOn\": 0,",
                  "  \"overrides\": {",
                  "    \"details\": \"string\",",
                  "    \"images\": \"array\",",
                  "    \"rule\": {",
                  "      \"id\": 0",
                  "    },",
                  "    \"text\": \"string\",",
                  "    \"title\": \"string\"",
                  "  },",
                  "  \"promotionId\": \"string\",",
                  "  \"retailerProfileId\": \"string\",",
                  "  \"startDate\": \"date\",",
                  "  \"status\": \"string\",",
                  "  \"timezone\": \"string\"",
                  "}",
                  "",
                  "pm.test('Schema is valid', function() {",
                  "  pm.expect(tv4.validate(testObject, schema)).to.be.true;",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n \"clipByDate\": \"2019-01-01T14:00:00\",\n \"endDate\": \"2019-01-01T14:00:00\",\n \"overrides\": {\n   \"details\": \"Dealer: Submission to Procter & Gamble signifies compliance with 'Requirements for Proper Coupon Redemption.' Please visit this link for coupon terms for proper redemption: http://www.pg.com/en_US/downloads/partners_suppliers/PG_Coupon_Terms_of_Proper_Redemption.pdf. Limit of one coupon per item. Consumer: Limit ONE coupon per purchase of products and quantities stated. Any other use constitutes fraud. Coupons are not authorized if purchasing products for resale. You may pay sales tax. Not valid in Puerto Rico.\",\n   \"images\": [\n     \"Gain laundry detergent/5b6b6bd4d12f8512623c2e8b.png\"\n   ],\n   \"rule\": {\n     \"id\": 0,\"type\": \"SingleRule\"\n   },\n   \"text\": \"Get $0.50 OFF Gain\",\n   \"title\": \"When buy Two Gain laundry detergent\"\n },\n \"retailerProfileId\": \"3\",\n \"startDate\": \"2019-01-01T14:00:00\"\n   }"
            },
            "url": "http://qa-apps.caligotech.com:8188/promotions/{{promo_id}}/campaigns/"
          },
          "response": []
        },
        {
          "_postman_id": "0058e02e-70a0-47d0-b45c-869d1d2a9790",
          "name": "Step 3:Publish Promotion",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "6957470e-935c-42c1-89c9-9534a294eb22",
                "type": "text/javascript",
                "exec": [
                  "",
                  "pm.test(\"Successful POST request\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200,201,202,204]);",
                  "});",
                  ""
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "23bef111-4e63-41e1-acf6-9b2754add19c",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Promo is DRAFT or ACTIVE\", function() {",
                  "    pm.expect(testObject.status === \"DRAFT\" || \"ACTIVE\").to.eql(true);",
                  "});",
                  "",
                  "pm.test(\"Promo is not paused\", function() {",
                  "    pm.expect(testObject.status === \"NULL\" || false).to.eql(true);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "",
                "value": "",
                "disabled": true
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"campaignIds\": [\r\n\t\"{{camp_id}}\"\r\n   ]\r\n}"
            },
            "url": "http://qa-apps.caligotech.com:8188/promotions/{{promo_id}}/publish/",
            "description": "Publish Promotion"
          },
          "response": []
        },
        {
          "_postman_id": "f4641484-4c92-4425-8ea4-04dace15de2b",
          "name": "Step 4: Get promotion from MongoDB",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "9d00a54b-7b5f-43a8-bad1-5712778ed295",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const testObject = pm.response.json();",
                  "const items = testObject.results[0];",
                  "console.log(\"items \"+items);",
                  "let dfs = items.dfsPromotionFileId;",
                  "console.log(\"dfs here \"+dfs);",
                  "pm.environment.set(\"dfsPromotion\", items.dfsPromotionFileId);",
                  "",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "body": {},
            "url": {
              "raw": "http://qa-mongodb.caligotech.com:27080/jedha/promotions/_find?criteria={\"_id\":{\"$oid\":\"{{promo_id}}\"}}",
              "protocol": "http",
              "host": [
                "qa-mongodb",
                "caligotech",
                "com"
              ],
              "port": "27080",
              "path": [
                "jedha",
                "promotions",
                "_find"
              ],
              "query": [
                {
                  "key": "criteria",
                  "value": "{\"_id\":{\"$oid\":\"{{promo_id}}\"}}",
                  "equals": true
                }
              ]
            }
          },
          "response": []
        }
      ],
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "id": "4be972aa-91e3-4450-851c-22b58fddd33c",
            "type": "text/javascript",
            "exec": [
              ""
            ]
          }
        },
        {
          "listen": "test",
          "script": {
            "id": "4361a239-47c4-440f-a86a-e6d05dcddf3b",
            "type": "text/javascript",
            "exec": [
              ""
            ]
          }
        }
      ]
    },
    {
      "_postman_id": "095e19a5-d699-40c9-95bb-0a8143fbde3b",
      "name": "PLAT-137:Verify hash cannot be retrieved if promotion is draft",
      "description": "",
      "item": [
        {
          "_postman_id": "03b7c745-0a5f-4505-b5a3-58e21b671ef3",
          "name": "Step 1:Post promotion",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "139798d2-92a9-433b-9c6b-7d16f0bc1f34",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const testObject = pm.response.json();",
                  "",
                  "pm.environment.set(\"promo_id\", testObject.id);",
                  "",
                  "",
                  "pm.test(\"Promo contains Id\", function() {",
                  "    const Id = testObject.id;",
                  "    const lengthId = Id.length > 0;",
                  "    pm.expect(lengthId).to.eql(true);",
                  "});",
                  "",
                  "pm.test(\"Promo contains start date\", function() {",
                  "    const startDate = new Date(testObject.startDate);",
                  "    const isADate = Object.prototype.toString.call(startDate) === '[object Date]';",
                  "    pm.expect(isADate).to.eql(true);",
                  "});",
                  "",
                  "pm.test(\"Promo contains end date\", function() {",
                  "    const endDate = new Date(testObject.endDate);",
                  "    const isADate = Object.prototype.toString.call(endDate) === '[object Date]';",
                  "    pm.expect(isADate).to.eql(true);",
                  "});",
                  "",
                  "pm.test(\"Promo contains title\", function() {",
                  "    const title = testObject.title;",
                  "    const lengthTitle = title.length > 0;",
                  "    pm.expect(lengthTitle).to.eql(true);",
                  "});",
                  "",
                  "pm.test(\"Promo contains text\", function() {",
                  "    const text = testObject.text;",
                  "    const lengthText = text.length > 0;",
                  "    pm.expect(lengthText).to.eql(true);",
                  "});",
                  "",
                  "pm.test(\"Promo contains details\", function() {",
                  "    const details = testObject.details;",
                  "    const lengthDetails = details.length > 0;",
                  "    pm.expect(lengthDetails).to.eql(true);",
                  "});",
                  "",
                  "pm.test(\"Promo contains promo code\", function() {",
                  "    const promoCode = testObject.providerPromotionCode;",
                  "    const lengthPromoCode = promoCode.length > 0;",
                  "    pm.expect(lengthPromoCode).to.eql(true);",
                  "});",
                  "",
                  "pm.test(\"Promo contains images link\", function() {",
                  "    const images = testObject.images;",
                  "    const lengthimages = images.length > 0;",
                  "    pm.expect(lengthimages).to.eql(true);",
                  "});",
                  "",
                  "",
                  "",
                  "var schema = {",
                  "  \"title\" : \"string\",",
                  "  \"providerPromotionCode\" : \"string\",",
                  "  \"text\" : \"string\",",
                  "  \"details\" : \"string\",",
                  "  \"images\" :\"array\",",
                  "  \"rule\" : {",
                  "    \"id\" : null,",
                  "    \"type\" : \"string\",",
                  "    \"condition\" : {",
                  "      \"id\" : null,",
                  "      \"type\" : \"string\",",
                  "      \"mpr\" : 1,",
                  "      \"product\" : {",
                  "        \"upcs\" : \"array\",",
                  "        \"brands\" : [ {",
                  "          \"brand\" : \"string\",",
                  "          \"products\" : [ \"string\" ]",
                  "        } ]",
                  "      }",
                  "    },",
                  "    \"reward\" : {",
                  "      \"type\" : \"string\",",
                  "      \"id\" : null,",
                  "      \"value\" : \"integer\",",
                  "      \"brands\" : [ {",
                  "          \"brand\" : \"string\",",
                  "          \"products\" : \"array\"",
                  "        } ]",
                  "    }",
                  "  },",
                  "  \"startDate\" : \"date\",",
                  "  \"endDate\" : \"date\",",
                  "  \"budgetId\" : \"string\",",
                  "  \"familyCode\" : \"string\",",
                  "  \"gs1Databar\" : \"string\"",
                  "  ",
                  "}",
                  "",
                  "",
                  "pm.test('Schema is valid', function() {",
                  "  pm.expect(tv4.validate(testObject, schema)).to.be.true;",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"title\" : \"Get $0.50 on Ivory Body Wash \",\r\n  \"providerPromotionCode\" : \"131240 \",\r\n  \"text\" : \"OFF ONE Ivory Body Wash (21oz or larger) \",\r\n  \"details\" : \"Dealer: Submission to Procter & Gamble signifies compliance with 'Requirements for Proper Coupon Redemption.' Please visit this link for coupon terms for proper redemption: http://www.pg.com/en_US/downloads/partners_suppliers/PG_Coupon_Terms_of_Proper_Redemption.pdf. Limit of one coupon per item. Consumer: Limit ONE coupon per purchase of products and quantities stated. Any other use constitutes fraud. Coupons are not authorized if purchasing products for resale. You may pay sales tax. Not valid in Puerto Rico.\",\r\n  \"images\" : [ \"ivory/5b3e8c36d12f85041119ea07.png\" ],\r\n  \"rule\" : {\r\n    \"id\" : null,\r\n    \"type\" : \"SingleRule\",\r\n    \"condition\" : {\r\n      \"id\" : null,\r\n      \"type\" : \"ClipCondition\"\r\n      },\r\n  \r\n    \"reward\" : {\r\n      \"type\" : \"DiscountValueReward\",\r\n      \"id\" : null,\r\n      \"value\" : 50,\r\n      \"brands\" : [ {\r\n          \"brand\" : \"1\",\r\n          \"products\" : [ \"12\" ]\r\n        } ]\r\n    }\r\n  },\r\n  \"startDate\" : \"2018-01-01T14:00:00\",\r\n  \"endDate\" : \"2018-01-31T14:00:00\",\r\n  \"budgetId\" : \"budget_id_1\",\r\n  \"familyCode\" : \"130\",\r\n  \"gs1Databar\" : \"81101007560913123933001101303170701\"\r\n  \r\n}"
            },
            "url": "http://qa-apps.caligotech.com:8188/promotions/"
          },
          "response": []
        },
        {
          "_postman_id": "aa1d989d-2471-4fd1-85d4-aa1bbee892b4",
          "name": "Step 2:Add Campaign to the Promotion",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "68951a79-ef33-4fd3-9957-ca8e95366aa0",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const testObject = pm.response.json();",
                  "pm.environment.set(\"camp_id\", testObject.id);",
                  "const promo_id = pm.environment.get(\"promo_id\");",
                  "",
                  "",
                  "pm.test(\"Promo contains campaign Id\", function() {",
                  "    const id = testObject.id;",
                  "    const lengthid = id.length > 0;",
                  "    pm.expect(lengthid).to.eql(true);",
                  "});",
                  "",
                  "pm.test(\"Promo contains start date\", function() {",
                  "    const startDate = new Date(testObject.startDate);",
                  "    const isADate = Object.prototype.toString.call(startDate) === '[object Date]';",
                  "    pm.expect(isADate).to.eql(true);",
                  "});",
                  "",
                  "pm.test(\"Promo contains end date\", function() {",
                  "    const endDate = new Date(testObject.endDate);",
                  "    const isADate = Object.prototype.toString.call(endDate) === '[object Date]';",
                  "    pm.expect(isADate).to.eql(true);",
                  "});",
                  "",
                  "pm.test(\"Promo contains clipByDate\", function() {",
                  "    const clipByDate = new Date(testObject.clipByDate);",
                  "    const isADate = Object.prototype.toString.call(clipByDate) === '[object Date]';",
                  "    pm.expect(isADate).to.eql(true);",
                  "});",
                  "",
                  "",
                  "pm.test(\"Promotion Id check\", function () {",
                  "  pm.expect(testObject.promotionId).to.eql(promo_id);",
                  "});",
                  "",
                  "",
                  "",
                  "pm.test(\"Promo contains modifiedBy\", function() {",
                  "    const modifiedBy = testObject.modifiedBy;",
                  "    const lengthmodifiedBy = modifiedBy.length > 0;",
                  "    pm.expect(lengthmodifiedBy).to.eql(true);",
                  "});",
                  "",
                  "pm.test(\"Promo contains modifiedOn\", function() {",
                  "    const modifiedOnRaw = testObject.modifiedOn;",
                  "    const modifiedOn = new Date(modifiedOnRaw*1000);",
                  "    const isADate =  Object.prototype.toString.call(modifiedOn) === '[object Date]';",
                  "    pm.expect(isADate).to.eql(true);",
                  "});",
                  "",
                  "pm.test(\"Promo contains status\", function() {",
                  "    const status = testObject.status;",
                  "    const lengthstatus = status.length > 0;",
                  "    pm.expect(lengthstatus).to.eql(true);",
                  "});",
                  "",
                  "var schema = {",
                  "  \"clipByDate\": \"date\",",
                  "  \"endDate\": \"date\",",
                  "  \"id\": \"string\",",
                  "  \"modifiedBy\": \"string\",",
                  "  \"modifiedOn\": 0,",
                  "  \"overrides\": {",
                  "    \"details\": \"string\",",
                  "    \"images\": \"array\",",
                  "    \"rule\": {",
                  "      \"id\": 0",
                  "    },",
                  "    \"text\": \"string\",",
                  "    \"title\": \"string\"",
                  "  },",
                  "  \"promotionId\": \"string\",",
                  "  \"retailerProfileId\": \"string\",",
                  "  \"startDate\": \"date\",",
                  "  \"status\": \"string\",",
                  "  \"timezone\": \"string\"",
                  "}",
                  "",
                  "pm.test('Schema is valid', function() {",
                  "  pm.expect(tv4.validate(testObject, schema)).to.be.true;",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n \"clipByDate\": \"2019-01-01T14:00:00\",\n \"endDate\": \"2019-01-01T14:00:00\",\n \"overrides\": {\n   \"details\": \"Dealer: Submission to Procter & Gamble signifies compliance with 'Requirements for Proper Coupon Redemption.' Please visit this link for coupon terms for proper redemption: http://www.pg.com/en_US/downloads/partners_suppliers/PG_Coupon_Terms_of_Proper_Redemption.pdf. Limit of one coupon per item. Consumer: Limit ONE coupon per purchase of products and quantities stated. Any other use constitutes fraud. Coupons are not authorized if purchasing products for resale. You may pay sales tax. Not valid in Puerto Rico.\",\n   \"images\": [\n     \"Gain laundry detergent/5b6b6bd4d12f8512623c2e8b.png\"\n   ],\n   \"rule\": {\n     \"id\": 0,\"type\": \"SingleRule\"\n   },\n   \"text\": \"Get $0.50 OFF Gain\",\n   \"title\": \"When buy Two Gain laundry detergent\"\n },\n \"retailerProfileId\": \"3\",\n \"startDate\": \"2019-01-01T14:00:00\"\n   }"
            },
            "url": "http://qa-apps.caligotech.com:8188/promotions/{{promo_id}}/campaigns/"
          },
          "response": []
        },
        {
          "_postman_id": "cc29de19-560f-44f8-a56d-d67d1b6327e7",
          "name": "Step 3: Get promotion from MongoDB",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f4fe6052-6156-4e61-a1a3-6822c9577726",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const testObject = pm.response.json();",
                  "const items = testObject.results[0];",
                  "console.log(\"items \"+items);",
                  "let dfs = items.dfsPromotionFileId;",
                  "console.log(\"dfs here \"+dfs);",
                  "pm.environment.set(\"dfsPromotion\", items.dfsPromotionFileId);",
                  "",
                  "pm.test(\"Promotion doesn't have dfsFileId\", function() {",
                  "    let check = null;",
                  "    if (testObject.dfsPromotionFileId === undefined) {",
                  "        check = true;",
                  "    }",
                  "    pm.expect(check).to.eql(true);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "body": {},
            "url": {
              "raw": "http://qa-mongodb.caligotech.com:27080/jedha/promotions/_find?criteria={\"_id\":{\"$oid\":\"{{promo_id}}\"}}",
              "protocol": "http",
              "host": [
                "qa-mongodb",
                "caligotech",
                "com"
              ],
              "port": "27080",
              "path": [
                "jedha",
                "promotions",
                "_find"
              ],
              "query": [
                {
                  "key": "criteria",
                  "value": "{\"_id\":{\"$oid\":\"{{promo_id}}\"}}",
                  "equals": true
                }
              ]
            }
          },
          "response": []
        }
      ],
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "id": "4be972aa-91e3-4450-851c-22b58fddd33c",
            "type": "text/javascript",
            "exec": [
              ""
            ]
          }
        },
        {
          "listen": "test",
          "script": {
            "id": "4361a239-47c4-440f-a86a-e6d05dcddf3b",
            "type": "text/javascript",
            "exec": [
              ""
            ]
          }
        }
      ]
    },
    {
      "_postman_id": "f259977f-b7c7-4666-93c5-112e65dd9847",
      "name": "PLAT-117:Verify system returns new hash when file is modified",
      "description": "",
      "item": [
        {
          "_postman_id": "99da3c28-d5f9-45ca-9587-1883d79dda79",
          "name": "Step 1:Post promotion",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "1c7be94e-d5d3-4c3f-a42e-bd960d7b5018",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const testObject = pm.response.json();",
                  "",
                  "pm.environment.set(\"promo_id\", testObject.id);",
                  "",
                  "",
                  "",
                  "pm.test(\"Promo contains Id\", function() {",
                  "    const Id = testObject.id;",
                  "    const lengthId = Id.length > 0;",
                  "    pm.expect(lengthId).to.eql(true);",
                  "});",
                  "",
                  "pm.test(\"Promo contains start date\", function() {",
                  "    const startDate = new Date(testObject.startDate);",
                  "    const isADate = Object.prototype.toString.call(startDate) === '[object Date]';",
                  "    pm.expect(isADate).to.eql(true);",
                  "});",
                  "",
                  "pm.test(\"Promo contains end date\", function() {",
                  "    const endDate = new Date(testObject.endDate);",
                  "    const isADate = Object.prototype.toString.call(endDate) === '[object Date]';",
                  "    pm.expect(isADate).to.eql(true);",
                  "});",
                  "",
                  "",
                  "",
                  "pm.test(\"Promo contains familyCode with 3 digits\", function() {",
                  "    const familyCode = testObject.familyCode;",
                  "    const lengthfamilyCode = familyCode.length == 3;",
                  "    pm.expect(lengthfamilyCode).to.eql(true);",
                  "});",
                  "",
                  "pm.test(\"Promo contains gs1Databar with more than 25 digits\", function() {",
                  "    const gs1Databar = testObject.gs1Databar;",
                  "    const lengthgs1Databar = gs1Databar.length > 25;",
                  "    pm.expect(lengthgs1Databar).to.eql(true);",
                  "});",
                  "",
                  "pm.test(\"Promo contains title\", function() {",
                  "    const title = testObject.title;",
                  "    const lengthTitle = title.length > 0;",
                  "    pm.expect(lengthTitle).to.eql(true);",
                  "});",
                  "",
                  "pm.test(\"Promo contains text\", function() {",
                  "    const text = testObject.text;",
                  "    const lengthText = text.length > 0;",
                  "    pm.expect(lengthText).to.eql(true);",
                  "});",
                  "",
                  "pm.test(\"Promo contains details\", function() {",
                  "    const details = testObject.details;",
                  "    const lengthDetails = details.length > 0;",
                  "    pm.expect(lengthDetails).to.eql(true);",
                  "});",
                  "",
                  "pm.test(\"Promo contains promo code\", function() {",
                  "    const promoCode = testObject.providerPromotionCode;",
                  "    const lengthPromoCode = promoCode.length > 0;",
                  "    pm.expect(lengthPromoCode).to.eql(true);",
                  "});",
                  "",
                  "pm.test(\"Promo contains images link\", function() {",
                  "    const images = testObject.images;",
                  "    const lengthimages = images.length > 0;",
                  "    pm.expect(lengthimages).to.eql(true);",
                  "});",
                  "",
                  "",
                  "",
                  "var schema = {",
                  "  \"title\" : \"string\",",
                  "  \"providerPromotionCode\" : \"string\",",
                  "  \"text\" : \"string\",",
                  "  \"details\" : \"string\",",
                  "  \"images\" :\"array\",",
                  "  \"rule\" : {",
                  "    \"id\" : null,",
                  "    \"type\" : \"string\",",
                  "    \"condition\" : {",
                  "      \"id\" : null,",
                  "      \"type\" : \"string\",",
                  "      \"mpr\" : 1,",
                  "      \"product\" : {",
                  "        \"upcs\" : \"array\",",
                  "        \"brands\" : [ {",
                  "          \"brand\" : \"string\",",
                  "          \"products\" : [ \"string\" ]",
                  "        } ]",
                  "      }",
                  "    },",
                  "    \"reward\" : {",
                  "      \"type\" : \"string\",",
                  "      \"id\" : null,",
                  "      \"value\" : \"integer\",",
                  "      \"brands\" : [ {",
                  "          \"brand\" : \"string\",",
                  "          \"products\" : \"array\"",
                  "        } ]",
                  "    }",
                  "  },",
                  "  \"startDate\" : \"date\",",
                  "  \"endDate\" : \"date\",",
                  "  \"budgetId\" : \"string\",",
                  "  \"familyCode\" : \"string\",",
                  "  \"gs1Databar\" : \"string\"",
                  "  ",
                  "}",
                  "",
                  "",
                  "pm.test('Schema is valid', function() {",
                  "  pm.expect(tv4.validate(testObject, schema)).to.be.true;",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"title\" : \"Get $0.50 on Ivory Body Wash \",\r\n  \"providerPromotionCode\" : \"131240 \",\r\n  \"text\" : \"OFF ONE Ivory Body Wash (21oz or larger) \",\r\n  \"details\" : \"Dealer: Submission to Procter & Gamble signifies compliance with 'Requirements for Proper Coupon Redemption.' Please visit this link for coupon terms for proper redemption: http://www.pg.com/en_US/downloads/partners_suppliers/PG_Coupon_Terms_of_Proper_Redemption.pdf. Limit of one coupon per item. Consumer: Limit ONE coupon per purchase of products and quantities stated. Any other use constitutes fraud. Coupons are not authorized if purchasing products for resale. You may pay sales tax. Not valid in Puerto Rico.\",\r\n  \"images\" : [ \"ivory/5b3e8c36d12f85041119ea07.png\" ],\r\n  \"rule\" : {\r\n    \"id\" : null,\r\n    \"type\" : \"SingleRule\",\r\n    \"condition\" : {\r\n      \"id\" : null,\r\n      \"type\" : \"ClipCondition\"\r\n      },\r\n  \r\n    \"reward\" : {\r\n      \"type\" : \"DiscountValueReward\",\r\n      \"id\" : null,\r\n      \"value\" : 50,\r\n      \"brands\" : [ {\r\n          \"brand\" : \"1\",\r\n          \"products\" : [ \"12\" ]\r\n        } ]\r\n    }\r\n  },\r\n  \"startDate\" : \"2018-01-01T14:00:00\",\r\n  \"endDate\" : \"2018-01-31T14:00:00\",\r\n  \"budgetId\" : \"budget_id_1\",\r\n  \"familyCode\" : \"130\",\r\n  \"gs1Databar\" : \"81101007560913123933001101303170701\"\r\n  \r\n}"
            },
            "url": "http://qa-apps.caligotech.com:8188/promotions/"
          },
          "response": []
        },
        {
          "_postman_id": "da0d3e7f-9e2e-485c-9198-934d7ff4ffca",
          "name": "Step 2:Add Campaign to the Promotion",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "5ff880c5-2e94-4631-a56d-d61e1dabc4e2",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const testObject = pm.response.json();",
                  "pm.environment.set(\"camp_id\", testObject.id);",
                  "const promo_id = pm.environment.get(\"promo_id\");",
                  "",
                  "",
                  "pm.test(\"Promo contains campaign Id\", function() {",
                  "    const id = testObject.id;",
                  "    const lengthid = id.length > 0;",
                  "    pm.expect(lengthid).to.eql(true);",
                  "});",
                  "",
                  "pm.test(\"Promo contains start date\", function() {",
                  "    const startDate = new Date(testObject.startDate);",
                  "    const isADate = Object.prototype.toString.call(startDate) === '[object Date]';",
                  "    pm.expect(isADate).to.eql(true);",
                  "});",
                  "",
                  "pm.test(\"Promo contains end date\", function() {",
                  "    const endDate = new Date(testObject.endDate);",
                  "    const isADate = Object.prototype.toString.call(endDate) === '[object Date]';",
                  "    pm.expect(isADate).to.eql(true);",
                  "});",
                  "",
                  "pm.test(\"Promo contains clipByDate\", function() {",
                  "    const clipByDate = new Date(testObject.clipByDate);",
                  "    const isADate = Object.prototype.toString.call(clipByDate) === '[object Date]';",
                  "    pm.expect(isADate).to.eql(true);",
                  "});",
                  "",
                  "",
                  "",
                  "pm.test(\"Promotion Id check\", function () {",
                  " pm.expect(testObject.promotionId).to.eql(promo_id);",
                  "});",
                  "",
                  "",
                  "",
                  "pm.test(\"Promo contains modifiedBy\", function() {",
                  "    const modifiedBy = testObject.modifiedBy;",
                  "    const lengthmodifiedBy = modifiedBy.length > 0;",
                  "    pm.expect(lengthmodifiedBy).to.eql(true);",
                  "});",
                  "",
                  "pm.test(\"Promo contains modifiedOn\", function() {",
                  "    const modifiedOnRaw = testObject.modifiedOn;",
                  "    const modifiedOn = new Date(modifiedOnRaw*1000);",
                  "    const isADate =  Object.prototype.toString.call(modifiedOn) === '[object Date]';",
                  "    pm.expect(isADate).to.eql(true);",
                  "});",
                  "",
                  "pm.test(\"Promo contains status\", function() {",
                  "    const status = testObject.status;",
                  "    const lengthstatus = status.length > 0;",
                  "    pm.expect(lengthstatus).to.eql(true);",
                  "});",
                  "",
                  "var schema = {",
                  "  \"clipByDate\": \"date\",",
                  "  \"endDate\": \"date\",",
                  "  \"id\": \"string\",",
                  "  \"modifiedBy\": \"string\",",
                  "  \"modifiedOn\": 0,",
                  "  \"overrides\": {",
                  "    \"details\": \"string\",",
                  "    \"images\": \"array\",",
                  "    \"rule\": {",
                  "      \"id\": 0",
                  "    },",
                  "    \"text\": \"string\",",
                  "    \"title\": \"string\"",
                  "  },",
                  "  \"promotionId\": \"string\",",
                  "  \"retailerProfileId\": \"string\",",
                  "  \"startDate\": \"date\",",
                  "  \"status\": \"string\",",
                  "  \"timezone\": \"string\"",
                  "}",
                  "",
                  "pm.test('Schema is valid', function() {",
                  "  pm.expect(tv4.validate(testObject, schema)).to.be.true;",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n \"clipByDate\": \"2019-01-01T14:00:00\",\n \"endDate\": \"2019-01-01T14:00:00\",\n \"overrides\": {\n   \"details\": \"Dealer: Submission to Procter & Gamble signifies compliance with 'Requirements for Proper Coupon Redemption.' Please visit this link for coupon terms for proper redemption: http://www.pg.com/en_US/downloads/partners_suppliers/PG_Coupon_Terms_of_Proper_Redemption.pdf. Limit of one coupon per item. Consumer: Limit ONE coupon per purchase of products and quantities stated. Any other use constitutes fraud. Coupons are not authorized if purchasing products for resale. You may pay sales tax. Not valid in Puerto Rico.\",\n   \"images\": [\n     \"Gain laundry detergent/5b6b6bd4d12f8512623c2e8b.png\"\n   ],\n   \"rule\": {\n     \"id\": 0,\"type\": \"SingleRule\"\n   },\n   \"text\": \"Get $0.50 OFF Gain\",\n   \"title\": \"When buy Two Gain laundry detergent\"\n },\n \"retailerProfileId\": \"3\",\n \"startDate\": \"2019-01-01T14:00:00\"\n   }"
            },
            "url": "http://qa-apps.caligotech.com:8188/promotions/{{promo_id}}/campaigns/"
          },
          "response": []
        },
        {
          "_postman_id": "aed7a294-5cab-41e4-9832-24e99f4cc68a",
          "name": "Step 3:Publish Promotion",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "9262fd68-ee70-4d2d-ad2c-fac1cf921a79",
                "type": "text/javascript",
                "exec": [
                  "",
                  "pm.test(\"Successful POST request\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200,201,202,204]);",
                  "});",
                  ""
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "2d75f7d9-3b82-41e5-bf0b-1075073ec61a",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "",
                "value": "",
                "disabled": true
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"campaignIds\": [\r\n\t\"{{camp_id}}\"\r\n   ]\r\n}"
            },
            "url": "http://qa-apps.caligotech.com:8188/promotions/{{promo_id}}/publish/",
            "description": "Publish Promotion"
          },
          "response": []
        },
        {
          "_postman_id": "ebd93294-2376-49ba-8260-1d25d509150a",
          "name": "Step 4: Get promotion from MongoDB",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "9d00a54b-7b5f-43a8-bad1-5712778ed295",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const testObject = pm.response.json();",
                  "const items = testObject.results[0];",
                  "console.log(\"items \"+items);",
                  "let dfs = items.dfsPromotionFileId;",
                  "console.log(\"dfs here \"+dfs);",
                  "pm.environment.set(\"dfsPromotion\", items.dfsPromotionFileId);",
                  "",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "body": {},
            "url": {
              "raw": "http://qa-mongodb.caligotech.com:27080/jedha/promotions/_find?criteria={\"_id\":{\"$oid\":\"{{promo_id}}\"}}",
              "protocol": "http",
              "host": [
                "qa-mongodb",
                "caligotech",
                "com"
              ],
              "port": "27080",
              "path": [
                "jedha",
                "promotions",
                "_find"
              ],
              "query": [
                {
                  "key": "criteria",
                  "value": "{\"_id\":{\"$oid\":\"{{promo_id}}\"}}",
                  "equals": true
                }
              ]
            }
          },
          "response": []
        },
        {
          "_postman_id": "64871ede-cab2-455a-8029-b54c9af1a969",
          "name": "Step 5:Update promotion",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b0d15164-3693-4876-8d9d-e2293e7345fc",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"title\" : \"Get $0.50 on Ivory Body Wash \",\r\n  \"providerPromotionCode\" : \"131240\",\r\n  \"text\" : \"50 OFF ONE Ivory Body Wash (21oz or larger) \",\r\n  \"details\" : \"Dealer: Submission to Procter & Gamble signifies compliance with 'Requirements for Proper Coupon Redemption.' Please visit this link for coupon terms for proper redemption: http://www.pg.com/en_US/downloads/partners_suppliers/PG_Coupon_Terms_of_Proper_Redemption.pdf. Limit of one coupon per item. Consumer: Limit ONE coupon per purchase of products and quantities stated. Any other use constitutes fraud. Coupons are not authorized if purchasing products for resale. You may pay sales tax. Not valid in Puerto Rico.\",\r\n  \"images\" : [ \"ivory/5b3e8c36d12f85041119ea07.png\" ],\r\n  \"rule\" : {\r\n    \"id\" : null,\r\n    \"type\" : \"SingleRule\",\r\n    \"condition\" : {\r\n      \"id\" : null,\r\n      \"type\" : \"ClipCondition\"\r\n      }\r\n    ,\r\n    \"reward\" : {\r\n      \"type\" : \"DiscountValueReward\",\r\n      \"id\" : null,\r\n      \"value\" : 50,\r\n      \"brands\" : [ {\r\n          \"brand\" : \"1\",\r\n          \"products\" : [\"12\"]\r\n      }]\r\n    }\r\n  },\r\n  \"startDate\" : \"2018-01-01T14:00:00\",\r\n  \"endDate\" : \"2018-01-31T14:00:00\",\r\n  \"budgetId\" : \"budget_id_1\",\r\n  \"familyCode\" : \"130\",\r\n  \"gs1Databar\" : \"81101007560913123933001101303170701\"\r\n}"
            },
            "url": "http://qa-apps.caligotech.com:8188/promotions/{{promo_id}}",
            "description": "Modify a promotion"
          },
          "response": []
        },
        {
          "_postman_id": "5db3486a-fb27-40b8-a1bb-179098707caf",
          "name": "Step 6: Get promotion from MongoDB",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "477d669d-209e-4b75-8373-4d2109276f20",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const testObject = pm.response.json();",
                  "const items = testObject.results[0];",
                  "console.log(\"items \"+items);",
                  "let dfs = items.dfsPromotionFileId;",
                  "console.log(\"dfs here \"+dfs);",
                  "pm.environment.set(\"dfsPromotion\", items.dfsPromotionFileId);",
                  "",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "body": {},
            "url": {
              "raw": "http://qa-mongodb.caligotech.com:27080/jedha/promotions/_find?criteria={\"_id\":{\"$oid\":\"{{promo_id}}\"}}",
              "protocol": "http",
              "host": [
                "qa-mongodb",
                "caligotech",
                "com"
              ],
              "port": "27080",
              "path": [
                "jedha",
                "promotions",
                "_find"
              ],
              "query": [
                {
                  "key": "criteria",
                  "value": "{\"_id\":{\"$oid\":\"{{promo_id}}\"}}",
                  "equals": true
                }
              ]
            }
          },
          "response": []
        }
      ],
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "id": "d78e0cc2-4f06-4e4b-bcbb-fd1e4e6079c7",
            "type": "text/javascript",
            "exec": [
              ""
            ]
          }
        },
        {
          "listen": "test",
          "script": {
            "id": "dd72f35f-1888-4f80-88c7-e372b92779f0",
            "type": "text/javascript",
            "exec": [
              ""
            ]
          }
        }
      ]
    },
    {
      "_postman_id": "8d5badfc-be88-492e-a825-268bc1acf9a3",
      "name": "PLAT-116:Verify system return the same hash when same file is uploaded",
      "description": "",
      "item": [
        {
          "_postman_id": "f0f65062-1f0e-41c6-99f2-5a1d830337b7",
          "name": "Step 1:Upload a file into dFS as form-data-multipart",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "94ea4c40-2812-4c9b-bdf8-a2b730ac7d4f",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const testObject = pm.response.json();",
                  "",
                  "pm.environment.set(\"fileIdToCompare\", testObject.fileId);",
                  "",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\t\"name\":\"toDrall.json\",\n\t\"path\":[\"/Users/valyamarkova/Downloads/toDrall.json\"],\n\t\"content\":\"eyJ2ZXJzaW9uIjoiMS4wIiwicnVsZSI6eyJ0eXBlIjoiU2luZ2xlUnVsZSIsImlkIjowLCJjb25kaXRpb24iOnsidHlwZSI6IkJ1eVByb2R1Y3RDb25kaXRpb24iLCJpZCI6MSwibXByIjoxLCJwcm9kdWN0Ijp7InVwY3MiOlsiMDc1NjA5MTk1NTk0IiwiMDc1NjA5MTk1MzU4Il0sImJyYW5kcyI6W3siYnJhbmQiOiIxIiwicHJvZHVjdHMiOlsiMTIiXX1dfX0sInJld2FyZCI6eyJ0eXBlIjoiRGlzY291bnRWYWx1ZVJld2FyZCIsImlkIjoyLCJ2YWx1ZSI6NTB9fSwibWV0YWRhdGEiOnsidmVyc2lvbiI6IjEuMCIsInRpdGxlIjoiUmV0YWlsZXIgbmVnb3RpYXRpb24gdGVzdCB0ZXN0IDIiLCJ0ZXh0IjoiT0ZGIE9ORSBJdm9yeSBCb2R5IFdhc2ggKDIxb3ogb3IgbGFyZ2VyKSAiLCJkZXRhaWxzIjoiRGVhbGVyOiBTdWJtaXNzaW9uIHRvIFByb2N0ZXIgJiBHYW1ibGUgc2lnbmlmaWVzIGNvbXBsaWFuY2Ugd2l0aCAnUmVxdWlyZW1lbnRzIGZvciBQcm9wZXIgQ291cG9uIFJlZGVtcHRpb24uJyBQbGVhc2UgdmlzaXQgdGhpcyBsaW5rIGZvciBjb3Vwb24gdGVybXMgZm9yIHByb3BlciByZWRlbXB0aW9uOiBodHRwOi8vd3d3LnBnLmNvbS9lbl9VUy9kb3dubG9hZHMvcGFydG5lcnNfc3VwcGxpZXJzL1BHX0NvdXBvbl9UZXJtc19vZl9Qcm9wZXJfUmVkZW1wdGlvbi5wZGYuIExpbWl0IG9mIG9uZSBjb3Vwb24gcGVyIGl0ZW0uIENvbnN1bWVyOiBMaW1pdCBPTkUgY291cG9uIHBlciBwdXJjaGFzZSBvZiBwcm9kdWN0cyBhbmQgcXVhbnRpdGllcyBzdGF0ZWQuIEFueSBvdGhlciB1c2UgY29uc3RpdHV0ZXMgZnJhdWQuIENvdXBvbnMgYXJlIG5vdCBhdXRob3JpemVkIGlmIHB1cmNoYXNpbmcgcHJvZHVjdHMgZm9yIHJlc2FsZS4gWW91IG1heSBwYXkgc2FsZXMgdGF4LiBOb3QgdmFsaWQgaW4gUHVlcnRvIFJpY28uIiwiZmFtaWx5Q29kZSI6IjEzMCIsImdzMURhdGFiYXIiOiI4MTEwMTAwNzU2MDkxMzEyMzkzMzAwMTEwMTMwMzE3MDcwMSIsImltYWdlcyI6WyJpdm9yeS81YjNlOGMzNmQxMmY4NTA0MTExOWVhMDcucG5nIl19fQ==\"\n}"
            },
            "url": "http://qa-apps.caligotech.com:8189/dfs"
          },
          "response": []
        },
        {
          "_postman_id": "26c22a36-a9ab-4c01-a635-013de59d3922",
          "name": "Step 2:Upload a file into dFS again",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "3527abc2-c7a5-4ee6-811f-1034d520e952",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const testObject = pm.response.json();",
                  "let fil = pm.environment.get(\"fileIdToCompare\");",
                  "",
                  "pm.test(\"Check if fileId is same as previous\", function () {",
                  "",
                  "    pm.expect(testObject.fileId === fil).to.eql(true);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\t\"name\":\"toDrall.json\",\n\t\"path\":[\"/Users/valyamarkova/Downloads/toDrall.json\"],\n\t\"content\":\"eyJ2ZXJzaW9uIjoiMS4wIiwicnVsZSI6eyJ0eXBlIjoiU2luZ2xlUnVsZSIsImlkIjowLCJjb25kaXRpb24iOnsidHlwZSI6IkJ1eVByb2R1Y3RDb25kaXRpb24iLCJpZCI6MSwibXByIjoxLCJwcm9kdWN0Ijp7InVwY3MiOlsiMDc1NjA5MTk1NTk0IiwiMDc1NjA5MTk1MzU4Il0sImJyYW5kcyI6W3siYnJhbmQiOiIxIiwicHJvZHVjdHMiOlsiMTIiXX1dfX0sInJld2FyZCI6eyJ0eXBlIjoiRGlzY291bnRWYWx1ZVJld2FyZCIsImlkIjoyLCJ2YWx1ZSI6NTB9fSwibWV0YWRhdGEiOnsidmVyc2lvbiI6IjEuMCIsInRpdGxlIjoiUmV0YWlsZXIgbmVnb3RpYXRpb24gdGVzdCB0ZXN0IDIiLCJ0ZXh0IjoiT0ZGIE9ORSBJdm9yeSBCb2R5IFdhc2ggKDIxb3ogb3IgbGFyZ2VyKSAiLCJkZXRhaWxzIjoiRGVhbGVyOiBTdWJtaXNzaW9uIHRvIFByb2N0ZXIgJiBHYW1ibGUgc2lnbmlmaWVzIGNvbXBsaWFuY2Ugd2l0aCAnUmVxdWlyZW1lbnRzIGZvciBQcm9wZXIgQ291cG9uIFJlZGVtcHRpb24uJyBQbGVhc2UgdmlzaXQgdGhpcyBsaW5rIGZvciBjb3Vwb24gdGVybXMgZm9yIHByb3BlciByZWRlbXB0aW9uOiBodHRwOi8vd3d3LnBnLmNvbS9lbl9VUy9kb3dubG9hZHMvcGFydG5lcnNfc3VwcGxpZXJzL1BHX0NvdXBvbl9UZXJtc19vZl9Qcm9wZXJfUmVkZW1wdGlvbi5wZGYuIExpbWl0IG9mIG9uZSBjb3Vwb24gcGVyIGl0ZW0uIENvbnN1bWVyOiBMaW1pdCBPTkUgY291cG9uIHBlciBwdXJjaGFzZSBvZiBwcm9kdWN0cyBhbmQgcXVhbnRpdGllcyBzdGF0ZWQuIEFueSBvdGhlciB1c2UgY29uc3RpdHV0ZXMgZnJhdWQuIENvdXBvbnMgYXJlIG5vdCBhdXRob3JpemVkIGlmIHB1cmNoYXNpbmcgcHJvZHVjdHMgZm9yIHJlc2FsZS4gWW91IG1heSBwYXkgc2FsZXMgdGF4LiBOb3QgdmFsaWQgaW4gUHVlcnRvIFJpY28uIiwiZmFtaWx5Q29kZSI6IjEzMCIsImdzMURhdGFiYXIiOiI4MTEwMTAwNzU2MDkxMzEyMzkzMzAwMTEwMTMwMzE3MDcwMSIsImltYWdlcyI6WyJpdm9yeS81YjNlOGMzNmQxMmY4NTA0MTExOWVhMDcucG5nIl19fQ==\"\n}"
            },
            "url": "http://qa-apps.caligotech.com:8189/dfs"
          },
          "response": []
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "id": "44f3a4a0-badc-4b58-a848-326f35051504",
        "type": "text/javascript",
        "exec": [
          ""
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "id": "212983f0-5f25-46be-b769-6413f9897110",
        "type": "text/javascript",
        "exec": [
          ""
        ]
      }
    }
  ],
  "variable": [
    {
      "id": "4ce09e4c-6d14-43ac-9b79-9dc14df6d586",
      "key": "hash_id",
      "value": "",
      "type": "string",
      "description": ""
    }
  ]
}